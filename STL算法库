#include <iostream>
#include <algorithm>            //算法头文件1
#include <vector>
#include <functional>
#include <iterator>
#include <ctime>
#include <numeric>             //算法头文件2


using namespace std;

void test01(){
	vector<int>vec;
	vector<int>vec4;
	for (int i = 0; i < 10; i++){
		vec.push_back(i);
		vec4.push_back(i + 4);
	}
//	for_each(vec.begin(), vec.end(), [](int val){cout << val << " "; });					   //for_each遍历算法
//	cout << endl;																			 
																							 
	vector<int>::iterator pos=find(vec.begin(), vec.end(), 3);                                 //find查找算法，返回第一个elem元素的iterator
//	cout << *pos << endl;																	 
	vector<int>::iterator pos1=find_if(vec.begin(), vec.end(), bind2nd(greater<int>(), 4));    //条件查找find_if
//	cout << *pos1 << endl;																	 
	int num=count(vec.begin(), vec.end(), 3);											      //count计数算法             
//	cout << num << endl;																	 
	int num1 = count_if(vec.begin(), vec.end(), bind2nd(greater<int>(), 4));                  //count_if条件计数算法
//	cout << num1 << endl;	
	binary_search(vec.begin(), vec.end(), 4);												  //binary_search二分查找算法

																							 
	sort(vec.begin(), vec.end(), greater<int>());                                             //sort排序算法
	//vector<int>vec1;
	//vector<int>vTarget;
	//vTarget.resize(vec.size() + vec1.size());
	//for (int i = 0; i < 10; i++){
	//	vec1.push_back(i + 2);
	//}
	//merge(vec.begin(), vec.end(), vec1.begin(),vec1.end(), vTarget.begin());                 //merge算法，合并有序vector
//	random_shuffle(vec.begin(), vec.end());


	//copy(vec.begin(), vec.end(), ostream_iterator < int > (cout, " "));                       //copy算法
	//cout << endl;
	vector<int>vec2;
	vec2.resize(vec.size());
	copy(vec.begin(), vec.end(), vec2.begin());                                              //copy算法
	//copy(vec2.begin(), vec2.end(), ostream_iterator < int >(cout, " "));
	//cout << endl;
	//replace(vec.begin(), vec.end(), 4, 60);                                                  //replace算法，替换
	//copy(vec.begin(), vec.end(), ostream_iterator < int >(cout, " "));
//	cout << endl;
	int sum=accumulate(vec.begin(), vec.end(), 0);                                            //累加算法,头文件<numeric>,第三个参数为初始值
//	cout << sum << endl;

	vector<int>vecT;
	vecT.resize( min (vec.size(), vec4.size()));
	vector<int>::iterator itVTend = set_intersection(vec.begin(), vec.end(), vec4.begin(), vec4.end(), vecT.begin());   //容器交接算法，intersection
	copy(vecT.begin(), itVTend, ostream_iterator < int >(cout, " "));
}
int main(){
	srand((unsigned int)time(NULL));
	test01();
	return 0;
}
